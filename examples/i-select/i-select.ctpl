i-select-example
    ul.i-example__list
        li.i-example__list-item
            p
                "Constructor can recognize following types of input data: String, Array, "
                a
                    @href "http://backbonejs.org/#Collection"
                    "Backbone.Collection"
                " and Object"
            CTPL-SHOW Usage
                i::select ( items ) /* ( options ) */

            //CALL i-select-example__options
            //CALL i-select-example__string
            //CALL i-select-example__array
            CALL i-select-example__collection
            //CALL i-select-example__object
            //CALL i-select-example__disabled
            //CALL i-select-example__customization

i-select-example__options
    h4
        "Options"
    p
        dl
            dt
                "size"
            dd
                "String. Values: S, M (default), L"
            dt
                "placeholder"
            dd
                "String. none (default)"
            dt
                "items"
            dd
                "String, Array, Object or Backbone.Collection"
            dt
                "mode"
            dd
                "String. Values: radio (default) or check"
            dt
                "delim"
            dd
                "String. ',' by default"
            dt
                "disabled"
            dd
                "Boolean. false by default"
            dt
                "viewButton"
            dd
                "Template name for i-select button customization."
            dt
                "viewOption"
            dd
                "Template name for i-select option customization."

i-select-example__string
    CTPL-SUITE String
        p
            "Set items with a comma-separated string. Attribute 'value' will be a string"
        CTPL-CODE radio mode
            span AS $stringContainer
                i::select ('One,Two,Three') AS $stringSelect
            SET $stringNode ($($stringContainer.firstChild))
            CTPL-TEST test selected
                expect( $stringSelect, 'check initial state' ).to.be.an.instanceof(Backbone.Model);
                var $options = $stringSelect.get('options');
                expect( $options, 'check options' ).to.be.an.instanceof(Backbone.Collection);
                var $option_1 = $options.at(0),
                    $option_2 = $options.at(1),
                    $option_3 = $options.at(2);
                expect($option_1.get('label') , 'check option 1' ).to.be.equal('One');
                expect($option_2.get('label') , 'check option 2' ).to.be.equal('Two');
                expect($option_3.get('label') , 'check option 3' ).to.be.equal('Three');

                expect($stringSelect.get('mode'),       'check radio mode' ).to.be.equal('radio');

                expect($stringSelect.get('selected'),   'check selected' ).to.be.a('array').and.to.be.empty();
                expect($stringSelect.get('value'),      'check value').to.be.a('string').and.to.be.empty();
                expect($stringSelect.get('label'),      'check label').to.equal($stringSelect.get('placeholder'));

                // DOM state
                expect($stringNode.hasClass('i-select__empty'), 'empty mod on').to.be.true;
                expect($stringNode.find('.i-button__label').text(), 'label equal to placeholder').to.be.equal($stringSelect.get('placeholder'));
                expect($stringNode.find('.i-button').attr('tabindex'), 'check tabindex').to.be.equal('0');

                $stringSelect.select("One");

                expect($stringSelect.get('selected'), 'check selected')
                    .to.be.an("array").and
                    .to.have.property('length', 1);
                expect($stringSelect.get('selected')[0], 'check selected contains model')
                    .to.be.an.instanceof(Backbone.Model);
                expect($stringSelect.get('value'), 'value is One').to.be.a("string").and.to.be.equal("One");
                expect($stringSelect.get('label'), 'label is One').to.be.equal("One");

                // DOM state
                expect($stringNode.hasClass('i-select__empty'), 'empty mod off').to.be.false;
                expect($stringNode.find('.i-button__label').text() ).to.be.equal('One');

                // check reset
                $stringSelect.reset();

                expect($stringSelect.get('selected'),   'check selected' ).to.be.a('array').and.to.be.empty();
                expect($stringSelect.get('value'),      'check value').to.be.a('string').and.to.be.empty();
                expect($stringSelect.get('label'),      'check label').to.equal($stringSelect.get('placeholder'));

                // DOM state
                expect($stringNode.find('.i-button__label').text() ).to.be.equal($stringSelect.get("placeholder"));

                // check setting non-existent value cause reset
                $stringSelect.select('One');
                $stringSelect.select('Four');

                expect($stringSelect.get('selected'),   'check selected' ).to.be.a('array').and.to.be.empty();
                expect($stringSelect.get('value'),      'check value').to.be.a('string').and.to.be.empty();
                expect($stringSelect.get('label'),      'check label').to.equal($stringSelect.get('placeholder'));
                // DOM state
                expect($stringNode.find('.i-button__label').text() ).to.be.equal($stringSelect.get("placeholder"));

                // test behavior
                $stringSelect.reset();
                // check behavior
                // init by mouseover
                $stringNode.find('.i-button').trigger($.Event('mouseover'));
                // fire mousedown
                $stringNode.find('.i-button').trigger($.Event('mousedown'));
                // fire mouseup
                $stringNode.find('.i-button').trigger($.Event('mouseup'));
                // check DOM
                expect($stringNode.hasClass('i-select__empty'), "empty mod on"  ).to.be.true;
                expect($stringNode.hasClass('i-select__open'),  "open mod on"   ).to.be.true;
                expect($stringNode.find('.i-button').hasClass('i-button__pseudofocus'), "button pseudofocus on").to.be.true;

                // check popup
                var popup = $('body .i-popup').last(),
                    popupItems = popup.find('.i-select__options-list__item'),
                    popupStyle = getComputedStyle( popup.get(0), null);
                expect( popupStyle.display ).to.be.equal('block');
                expect( popupItems.length  ).to.be.equal( 3 );
                // check item's nodes
                var $optionItem_1 = popupItems.get(0),
                    $optionItem_2 = popupItems.get(1),
                    $optionItem_3 = popupItems.get(2);

                expect( $($optionItem_1).text()  ).to.be.equal( 'One' );
                expect( $($optionItem_2).text()  ).to.be.equal( 'Two' );
                expect( $($optionItem_3).text()  ).to.be.equal( 'Three' );

        p
            "Set items with a string and a custom delimiter."
        CTPL-CODE check mode
            span AS $stringDelimContainer
                i::select ('One, Two, Three') ({'mode':'check', 'delim': ', '}) AS $stringCheckSelect
            SET $stringDelimNode ($($stringDelimContainer.firstChild))
            CTPL-TEST test selected
                // check initial state
                // must return a Backbone.Model
                expect( $stringCheckSelect ).to.be.an.instanceof(Backbone.Model);
                // check options
                var $options = $stringCheckSelect.get('options');
                expect( $options ).to.be.an.instanceof(Backbone.Collection);
                var $option_1 = $options.at(0),
                    $option_2 = $options.at(1),
                    $option_3 = $options.at(2);
                expect( $option_1.get('label') ).to.be.equal('One');
                expect( $option_2.get('label') ).to.be.equal('Two');
                expect( $option_3.get('label') ).to.be.equal('Three');


                // check mode
                expect($stringCheckSelect.get('mode')).to.be.equal("check");
                // check selected
                expect($stringCheckSelect.get('label')).to.equal($stringCheckSelect.get('placeholder'));


                $stringCheckSelect.select('One');
                $stringCheckSelect.select('Two');
                expect($stringCheckSelect.get('selected'))
                    .to.be.an('array').and
                    .to.have.property('length', 2);

                expect($stringCheckSelect.get('selected')[0], 'check selected #0 contains model')
                    .to.be.an.instanceof(Backbone.Model);
                expect($stringCheckSelect.get('selected')[1], 'check selected #1 contains model')
                    .to.be.an.instanceof(Backbone.Model);

                expect($stringCheckSelect.get('value'))
                    .to.be.a('string').and
                    .to.be.equal('One, Two').and
                    .to.be.equal($stringCheckSelect.get('label'));

                $stringCheckSelect.reset();
                expect($stringCheckSelect.get('selected'))
                    .to.be.an('array').and
                    .to.be.empty();
                expect($stringCheckSelect.get('value'))
                    .to.be.a('string').and
                    .to.be.empty();


i-select-example__array
    CTPL-SUITE Array
        p
            "Set items with an array. Attribute 'value' will be an array"
        CTPL-CODE radio mode
            i::select (['One', 'Two', 'Three']) AS $arraySelect
            CTPL-TEST radio mode

                expect( $arraySelect, 'check initial state' ).to.be.an.instanceof(Backbone.Model);
                var $options = $arraySelect.get('options');
                expect( $options, 'check options' ).to.be.an.instanceof(Backbone.Collection);

                expect($arraySelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($arraySelect.get('value'),    'check value'   ).to.be.an('array').and.to.be.empty();
                expect($arraySelect.get('label'),    'check label'   ).to.equal($arraySelect.get("placeholder"));

                $arraySelect.select('One');
                expect($arraySelect.get('selected')).to.be.an('array').and.to.have.property('length', 1);
                expect($arraySelect.get('selected')[0], 'check selected #0 contains model').to.be.an.instanceof(Backbone.Model);
                expect($arraySelect.get('value'), 'check value').to.be.an('array').and.to.have.property('length', 1);
                expect($arraySelect.get('value')[0], 'check value #0 contains One')
                    .to.be.a('string').and
                    .to.be.equal('One').and
                    .to.be.equal($arraySelect.get('label'));

                $arraySelect.select('Two');
                expect($arraySelect.get('selected')).to.be.an('array').and.to.have.property('length', 1);
                expect($arraySelect.get('selected')[0], 'check selected #0 contains model').to.be.an.instanceof(Backbone.Model);
                expect($arraySelect.get('value'), 'check value').to.be.an('array').and.to.have.property('length', 1);
                expect($arraySelect.get('value')[0], 'check value #0 contains Two')
                    .to.be.a('string').and
                    .to.be.equal('Two').and
                    .to.be.equal($arraySelect.get('label'));

                $arraySelect.reset();
                expect($arraySelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($arraySelect.get('value'),    'check value'   ).to.be.an('array').and.to.be.empty();
                expect($arraySelect.get('label'),    'check label'   ).to.equal($arraySelect.get("placeholder"));

        CTPL-CODE check mode
            i::select (["One", "Two", "Three"]) ({"mode":"check"}) AS $arrayCheckSelect
            CTPL-TEST check mode
                expect( $arrayCheckSelect, 'check initial state' ).to.be.an.instanceof(Backbone.Model);
                var $options = $arrayCheckSelect.get('options');
                expect( $options, 'check options' ).to.be.an.instanceof(Backbone.Collection);

                expect($arrayCheckSelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($arrayCheckSelect.get('value'),    'check value'   ).to.be.an('array').and.to.be.empty();
                expect($arrayCheckSelect.get('label'),    'check label'   ).to.equal($arrayCheckSelect.get("placeholder"));

                $arrayCheckSelect.select('One');
                $arrayCheckSelect.select('Two');

                expect($arrayCheckSelect.get('selected')).to.be.an('array').and.to.have.property('length', 2);
                expect($arrayCheckSelect.get('selected')[0], 'check selected #0 contains model').to.be.an.instanceof(Backbone.Model);
                expect($arrayCheckSelect.get('selected')[1], 'check selected #1 contains model').to.be.an.instanceof(Backbone.Model);
                expect($arrayCheckSelect.get('value'), 'check value').to.be.an('array').and.to.have.property('length', 2);
                expect($arrayCheckSelect.get('value')[0], 'check value #0 contains One').to.be.a('string').and.to.be.equal('One');
                expect($arrayCheckSelect.get('value')[1], 'check value #0 contains Two').to.be.a('string').and.to.be.equal('Two');
                expect($arrayCheckSelect.get('label'),    'check label'   ).to.equal('One,Two');

                $arrayCheckSelect.reset();
                expect($arrayCheckSelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($arrayCheckSelect.get('value'),    'check value'   ).to.be.an('array').and.to.be.empty();
                expect($arrayCheckSelect.get('label'),    'check label'   ).to.equal($arrayCheckSelect.get("placeholder"));

i-select-example__collection
    p
        "Set items with a Backbone.Collection. Attribute 'value' will be an array"
    CTPL-SUITE Backbone.Collection
        CTPL-CODE Define collection
            SET $collection (new Backbone.Collection([
                    {"value":"1", "label":"One"},
                    {"value":"2", "label":"Two"},
                    {"value":"3", "label":"Three"}
                ]))

        CTPL-CODE radio mode
            i::select ($collection) AS $collectionSelect
            CTPL-TEST radio mode
                expect( $collectionSelect, 'check initial state' ).to.be.an.instanceof(Backbone.Model);
                var $options = $collectionSelect.get('options');
                expect( $options, 'check options' ).to.be.an.instanceof(Backbone.Collection).and.to.be.equal($collection);

                expect($collectionSelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($collectionSelect.get('value'),    'check value'   ).to.be.null;
                expect($collectionSelect.get('label'),    'check label'   ).to.equal($collectionSelect.get("placeholder"));

                $collectionSelect.select($collection.at(0));
                expect($collectionSelect.get('selected')).to.be.an('array').and.to.have.property('length', 1);
                expect($collectionSelect.get('selected')[0], 'check selected #0 contains model').to.be.an.instanceof(Backbone.Model);
                expect($collectionSelect.get('value'), 'check value').to.be.an.instanceof(Backbone.Model).and.to.be.equal($collection.at(0));

                $collectionSelect.select($collection.at(1));
                expect($collectionSelect.get('selected')).to.be.an('array').and.to.have.property('length', 1);
                expect($collectionSelect.get('selected')[0], 'check selected #0 contains model').to.be.an.instanceof(Backbone.Model);
                expect($collectionSelect.get('value'), 'check value').to.be.an.instanceof(Backbone.Model).and.to.be.equal($collection.at(1));

                $collectionSelect.reset();
                expect($collectionSelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($collectionSelect.get('value'),    'check value'   ).to.be.null;
                expect($collectionSelect.get('label'),    'check label'   ).to.equal($collectionSelect.get("placeholder"));

        CTPL-CODE check mode
            i::select ($collection) ({"mode":"check"}) AS $collectionCheckSelect
            CTPL-TEST check mode
                expect( $collectionSelect, 'check initial state' ).to.be.an.instanceof(Backbone.Model);
                var $options = $collectionSelect.get('options');
                expect( $options, 'check options' ).to.be.an.instanceof(Backbone.Collection).and.to.be.equal($collection);

                expect($collectionCheckSelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($collectionCheckSelect.get('value'),    'check value'   ).to.be.an('array').and.to.be.empty();
                expect($collectionCheckSelect.get('label'),    'check label'   ).to.equal($collectionCheckSelect.get("placeholder"));

                $collectionCheckSelect.select($collection.at(0));
                expect($collectionCheckSelect.get('selected')).to.be.an('array').and.to.have.property('length', 1);
                expect($collectionCheckSelect.get('selected')[0], 'check selected #0 contains model').to.be.an.instanceof(Backbone.Model);
                expect($collectionCheckSelect.get('value'), 'check value').to.be.an('array').and.to.be.eql([$collection.at(0)]);

                $collectionCheckSelect.select($collection.at(1));
                expect($collectionCheckSelect.get('selected')).to.be.an('array').and.to.have.property('length', 2);
                expect($collectionCheckSelect.get('selected')[0], 'check selected #0 contains model').to.be.an.instanceof(Backbone.Model);
                expect($collectionCheckSelect.get('selected')[1], 'check selected #1 contains model').to.be.an.instanceof(Backbone.Model);
                expect($collectionCheckSelect.get('value'), 'check value').to.be.an('array').and.to.be.eql([$collection.at(0), $collection.at(1)]);

                $collectionCheckSelect.reset();
                expect($collectionCheckSelect.get('selected'), 'check selected').to.be.an('array').and.to.be.empty();
                expect($collectionCheckSelect.get('value'),    'check value'   ).to.be.an('array').and.to.be.empty();
                expect($collectionCheckSelect.get('label'),    'check label'   ).to.equal($collectionCheckSelect.get("placeholder"));

i-select-example__object
    CTPL-SUITE Object
        CTPL-CODE radio mode
            i::select ({
                "options":      "One; Two; Three",
                "size":         "S",
                "placeholder":  "numbers",
                "delim":        "; ",
                "mode":         "check"
            })

i-select-example__disabled
    CTPL-SUITE Disabled
        CTPL-CODE disabled
            i::select ('One,Two,Three') ({'disabled':true})

i-select-example__customization
    CTPL-SUITE Customization
        p
            "It's easy to modify "
            b
                "i-select"
            " view with custom templates. "
        CTPL-SHOW Define custom templates
            i-select__view-button $selected $select $check
                SET $label  ($selected || 'empty')
                div.i-select__view-button
                    span.i-select__view-button-label
                        ($label)
                    TEST ($label!='empty')
                        span.i-select__view-button-delete AS $delete
                            "×"
                        JS
                            $delete.addEventListener(
                                "mouseup",
                                function(e){
                                    e.stopPropagation();
                                    if($check){
                                        $select.select($label);
                                    } else {
                                        $select.reset();
                                    }
                                }
                            )
            i-select__view-option $model
                div.i-select__view-option
                    "→ "
                    ($model.get('label'))
                    " ←"

        CTPL-CODE radio mode
            i::select (
                {
                    "options":    "One,Two,Three",
                    "viewButton": "i-select__view-button",
                    "viewOption": "i-select__view-option"
                }
            ) AS $radioSelect
            CTPL-TEST must return a Backbone.Model
                expect( $radioSelect ).to.be.an('object');
                expect( $radioSelect ).to.be.an.instanceof(Backbone.Model);


        CTPL-CODE check mode
            i::select (
                {
                    "options":    "One,Two,Three",
                    "viewButton": "i-select__view-button",
                    "viewOption": "i-select__view-option",
                    "mode":       "check"
                }
            ) AS $checkSelect
            CTPL-TEST "test type"
                expect( $checkSelect ).to.be.an('object')

