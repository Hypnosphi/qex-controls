i-input-example
    ul.i-example__list
        li.i-example__list-item

            CTPL-SHOW Usage
                i::input ( placeholder ) /* ( options ) */
                 // or
                i::input /* ( options ) */

            CALL i-input-example__options
            CALL i-input-example__sizing
            CALL i-input-example__value
            CALL i-input-example__disabled
            CALL i-input-example__placeholder
            CALL i-input-example__delay

i-input-example__options
    h4
        "Options"
    p
        dl
            dt
                "size"
            dd
                "String. L, M or S. M by default"
            dt
                "placeholder"
            dd
                "String"
            dt
                "value"
            dd
                "String, Number"
            dt
                "disabled"
            dd
                "Boolean. false by default"
            dt
                "debounce"
            dd
                "Number. Debounce value in milliseconds, 0 by default"

i-input-example__sizing
    CTPL-SUITE Sizing
        CTPL-CODE Sizing scale
            div.i-example__button-sizing
                div AS $Lsize
                    @style "width:32%"
                    i::input ({'size': 'L', 'placeholder':'L size'})
                div AS $Msize
                    @style "width:32%"
                    i::input ({'size': 'M', 'placeholder':'M size'})
                div AS $Ssize
                    @style "width:32%"
                    i::input ({'size': 'S', 'placeholder':'S size'})

        CTPL-TEST test L > M > S
            var $L  = $($Lsize.firstChild),
                $M  = $($Msize.firstChild),
                $S  = $($Ssize.firstChild);
            // check classes
            expect( $L.hasClass('i-input__size-L')  ).to.be.true;
            expect( $M.hasClass('i-input__size-M')  ).to.be.true;
            expect( $S.hasClass('i-input__size-S')  ).to.be.true;
            // check size
            expect( $L.height() > $M.height()  ).to.be.true;
            expect( $M.height() > $S.height()  ).to.be.true;

i-input-example__value
    CTPL-SUITE Value
        CTPL-CODE Value
            span AS $container
                i::input ({'value': 'value'}) AS $input
            SET $node ($($container.firstChild))
            SET $nodeInput ($node.find('.i-input__input'))
            SET $nodeClear ($node.find('.i-input__clear'))
        CTPL-TEST ASYNC set 'value'

            var // check initial state
                checkValue = function(){
                    // check result is a Backbone.Model
                    expect( $input ).to.be.an.instanceof(Backbone.Model);
                    // check model value
                    expect( $input.get('value') ).to.be.equal('value');
                    // check DOM value
                    expect( $nodeInput.val() ).to.be.equal('value');
                    // check style
                    var clearStyle = getComputedStyle( $nodeClear.get(0) , null);
                    // check clear is displayed
                    expect( clearStyle.display !== 'none'  ).to.be.true;
                },
                // create empty state checker
                checkClear = function($input, value){
                    // check models value to be empty
                    expect( value ).to.be.equal('');
                    // check DOM attribute to be empty
                     expect( $nodeInput.val() ).to.be.equal('');
                    // check class
                    expect( $node.hasClass('i-input__empty') ).to.be.true;
                    // check focus
                    expect( $nodeInput.get(0) === document.activeElement ).to.be.true;

                    var clearStyle = getComputedStyle( $nodeClear.get(0) , null);
                    expect( clearStyle.display === 'none'  ).to.be.true;
                    // subscribe checkEnd
                    $input.once('change:value', checkEnd);
                    // set value
                    $input.set('value', 'value');
                },
                checkEnd = function($input, value){
                    $nodeInput.blur();
                    checkValue();
                    done();
                };
            // start check
            checkValue();
            // subscribe checkClear
            $input.once('change:value', checkClear);
            // init clearing value
            $nodeClear.trigger('click');


i-input-example__disabled
    CTPL-SUITE Disabled
        CTPL-CODE Disabled
            span AS $container
                i::input ({'value': 'value', 'disabled': true}) AS $input
            SET $node ($($container.firstChild))
            SET $nodeInput ($node.find('.i-input__input'))
            SET $nodeClear ($node.find('.i-input__clear'))

        CTPL-TEST set 'disabled'
            expect( $input ).to.be.an.instanceof(Backbone.Model);
            expect( $input.get('disabled') ).to.be.true();

            var clearStyle = getComputedStyle( $nodeClear.get(0) , null);
            expect( clearStyle.display === 'none'  ).to.be.true;
            expect( $nodeInput.is("[disabled]") ).to.be.true;
            expect( $nodeInput.get(0).disabled  ).to.be.true;
            expect( $node.hasClass('i-input__disabled') ).to.be.true;
            $input.set('disabled', false);
            clearStyle = getComputedStyle( $nodeClear.get(0) , null);
            expect( clearStyle.display !== 'none'  ).to.be.true;
            expect( $nodeInput.is("[disabled]") ).to.be.false;
            expect( $nodeInput.get(0).disabled  ).to.be.false;
            expect( $node.hasClass('i-input__disabled') ).to.be.false;

i-input-example__placeholder
    CTPL-SUITE Placeholder
        CTPL-CODE Placeholder
            span AS $container
                i::input ({'placeholder': 'placeholder'}) AS $input
            SET $nodeInput ($($container).find('.i-input__input'))
        CTPL-TEST set 'placeholder'
            expect( $input ).to.be.an.instanceof(Backbone.Model);
            expect( $input.get('placeholder') ).to.be.equal('placeholder');
            expect( $nodeInput.is("[placeholder]") ).to.be.true;
            expect( $nodeInput.get(0).placeholder  ).to.be.equal('placeholder');
            $input.set('placeholder', '');
            expect( $input.get('placeholder') ).to.be.equal('');
            expect( $nodeInput.is("[placeholder]") ).to.be.false;
            expect( $nodeInput.get(0).placeholder  ).to.be.equal('');

i-input-example__delay
    CTPL-SUITE Debounce
        CTPL-CODE Debounce
            div.i-example__button-sizing
                span AS $container_0
                    i::input ({'placeholder': '0 debounce'}) AS $input_0
                SET $nodeInput_0 ($($container_0).find('.i-input__input'))
                span AS $container_1000
                    i::input ({'placeholder': '1000 debounce', 'debounce': 1000}) AS $input_1000
                SET $nodeInput_1000 ($($container_1000).find('.i-input__input'))
        CTPL-TEST ASYNC set 'debounce'
            var // count of input events
                count       = 10,
                // step delay
                step        = 50,
                // test delay
                delay       = 1000,
                // spies
                action_0    = sinon.spy(),
                action_1000 = sinon.spy(),
                // counter
                i = 0,
                // test callback
                test = function(){
                    expect( action_0   .callCount ).to.be.equal( 10 );
                    expect( action_1000.callCount ).to.be.equal(  1 );
                    expect( action_0.calledBefore(action_1000) ).to.be.true;
                    done();
                },
                // input emulation
                trigger = function(i, end){
                    $nodeInput_0.val("#" + i);
                    $nodeInput_0.trigger('input');
                    $nodeInput_1000.val("#" + i);
                    $nodeInput_1000.trigger('input');
                    // start check
                    if (end) {
                        setTimeout(test, delay);
                    }
                };
            // subscribe spies
            $input_0   .on('change:value', action_0);
            $input_1000.on('change:value', action_1000);
            // triggering loop
            while(++i <= count){
                setTimeout(trigger, i * step, i, i === count);
            }




